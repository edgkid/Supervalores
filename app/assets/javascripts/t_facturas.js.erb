var i = 1;

// Añade una fila a la tabla con un select que contiene una lista de los recargos
function addRecargoRow () {
  $('#total-row').before(`
    <tr id="recargo${i}" style="background-color: #1C84C6;">
      <td><input class="deletable deletable-recargo" type="checkbox" name="deletable"></td>
      <td>
        <select class="select-recargo" data-first_time="true" id="t_recargo${i}" name="t_factura[t_recargo_ids][]" style="width: 100%;"></select>
      </td>
      <td class="descripcion-cell"></td>
      <td class="quantity-cell"><input class="quantity" data-quantity="1" min="0" style="height: 28px; width: 100%;" type="number" value="1"></td>
      <td class="price-cell"><input class="price recargo-input" min="0" readonly="readonly" step="0.01" style="height: 28px; width: 100%;" type="number"></td>
      <td class="subtotal-cell subtotal-cell-surcharge" style="color: aqua; text-align: center;"></td>
    </tr>
  `);
  $(`#t_recargo${i}`).select2({
    ajax: {
      url: '/t_recargos/find_by_descripcion',
      //url: '/t_clientes/find_by_codigo.json',
      dataType: 'json',
      data: function (params) {
        var query = {
          search: params.term
        }

        return query;
      },
      processResults: function (data) {
        return {
          results: $.map(data, function(t_recargo, i) {
            return { id: t_recargo.id, text: t_recargo.descripcion, rate: t_recargo.tasa } 
          })
        };
      },
      delay: 250
    },
    placeholder: 'Seleccione'
  });
  i++;
}

// <input name="t_factura[recargo_desc]" style="width: 100%;">

// Toda fila con una casilla marcada, será eliminada al presionar el botón de eliminación.
// Tal eliminación dependerá según si es servicio o recargo.
function deleteCheckedRows() {
  $('.deletable:checked').each(function() {
    if ($(this).hasClass('deletable-servicio')) {
      // Si es servicio, simulará un click al botón (link) correspondiente generado por el
      // helper de rails: link_to_remove_fields (está en _t_factura_detalle_fields.html.erb).
      // $(this).parent().siblings().last().children().last().click();
      $(this).parent().parent().remove();
    } else {
      // Si es un recargo, simplemente removerá el elemento HTML que es la fila de la tabla.
      $(this).parent().parent().remove();
    }

    setTotal('#total-quantity', getTotal('.quantity'));
    setTotal('#total', getTotal('.subtotal-cell'));
  });
}

// Obtiene el total de una columna seleccionada según su clase.
function getTotal(target, data = '', total = 0) {
  $(target).each(function() {
    if (data === '') {
      if ($(this).val() === '') {
        total += Number($(this).text());
      } else {
        total += Number($(this).val());
      }
    } else {
      total += Number($(this).data(data));
    }
  });
  return total;
}

// Asigna el total al elemento HTML objetivo.
function setTotal(target, total = 0) {
  // alert(calculateRatePrice());
  if (isNaN(total)) {
    $(target).text(0);
  } else {
    $(target).text(total);
  }
}

// Asigna el subtotal. Hay que indicar si el campo actual donde se dispara el
// evento es quantity o price, con `isQuantity`. `thys` es la sustitución de la
// palabra reservada `this`, para hacer entender que se utiliza el elemento actual.
function setSubTotal(thys, isQuantity = true) {
  isSurcharge = $(thys).hasClass('recargo-input');
  if (isQuantity) {
    var quantity = Number($(thys).val());
    var price = 0;
    var selfClass = 'price-cell';
  } else {
    if (isSurcharge) {
      var price = Number($(thys).val()) * 100;
    } else {
      var price = Number($(thys).val());
    }
    var quantity = 0;
    var selfClass = 'quantity-cell';
  }
  $(thys).parent().siblings().each(function () {
    if ($(this).hasClass(selfClass)) {
      if (isQuantity) {
        price = Number($(this).children().first().data('price'));
        // alert('price: ' + price);
      } else {
        quantity = Number($(this).children().first().val());
        // console.log($(this).children().first());
        // alert('quantity: ' + quantity);
        // alert($(this).children().first().data('quantity'));
      }
    }
    if ($(this).hasClass('subtotal-cell')) {
      if (isSurcharge) {
        // alert(price);
        $(this).text(quantity * price * Number($('#total').text()) / 100);// Number($('#total').text()) / 100);
      } else {
        $(this).text(quantity * price);
      }
    }
  });
}

function cleanAllSurcharges() {
  $('.subtotal-cell-surcharge').each(function () {
    $(this).text(0);
  });
}

function updateAllSurcharges() {
  $('.recargo-input').each(function () {
    let rate = $(this).val();
    $(this).data('price', rate * Number($('#total').text()));
    // alert(rate * Number($('#total').text()));
    setSubTotal(this, false);
    setTotal('#total', getTotal('.subtotal-cell'));
  });

  // $('.recargo-input').each(function () {
  //   let previousPrice = Number($(this).data('previous_price'));
  //   $(this).val(previousPrice / 100);
  //   $(this).data('price', previousPrice);
    // setSubTotal(this, false);
    // setTotal('#total', getTotal('.subtotal-cell'));
  // });
}