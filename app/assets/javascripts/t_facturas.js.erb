// <input name="t_factura[recargo_desc]" style="width: 100%;">

// Toda fila con una casilla marcada, será eliminada al presionar el botón de eliminación.
// Tal eliminación dependerá según si es servicio o recargo.
function deleteCheckedRows() {
  $('.deletable:checked').each(function() {
    if ($(this).hasClass('deletable-servicio')) {
      serviceId = $(this).parent().siblings('.select-cell').children('select').val();
      $('#services-to-destroy').append(`
        <input type="hidden" name="services_to_destroy[]" value="${serviceId}">
      `);
      $(this).parent().parent().remove();
    } else {
      surchargeId = $(this).parent().siblings('.select-surcharge-cell').children('select').val();
      $('#surcharges-to-destroy').append(`
        <input type="hidden" name="surcharges_to_destroy[]" value="${surchargeId}">
      `);
      $(this).parent().parent().remove();
    }

    setTotal('#total-quantity', getTotal('.quantity'));
    setTotal('#total', getTotal('.subtotal-cell'));
  });
}

// Obtiene el total de una columna seleccionada según su clase.
function getTotal(target, data = '', total = 0) {
  $(target).each(function() {
    if (data === '') {
      if ($(this).val() === '') {
        total += Number($(this).text());
      } else {
        total += Number($(this).val());
      }
    } else {
      total += Number($(this).data(data));
    }
  });
  return total;
}

// Asigna el total al elemento HTML objetivo.
function setTotal(target, total = 0) {
  // alert(calculateRatePrice());
  // console.log(`Total en setTotal: ${total}`);
  if (isNaN(total)) {
    $(target).text(0);
  } else {
    $(target).text(total);
  }
}

// Asigna el subtotal. Hay que indicar si el campo actual donde se dispara el
// evento es quantity o price, con `isQuantity`. `thys` es la sustitución de la
// palabra reservada `this`, para hacer entender que se utiliza el elemento actual.
function setSubTotal(thys, isQuantity = true) {
  isSurcharge = $(thys).hasClass('recargo-input');
  if (isQuantity) {
    var quantity = Number($(thys).val());
    var price = 0;
    var selfClass = 'price-cell';
  } else {
    if (isSurcharge) {
      var price = Number($(thys).val()) * 100;
    } else {
      var price = Number($(thys).val());
    }
    var quantity = 0;
    var selfClass = 'quantity-cell';
  }
  $(thys).parent().siblings().each(function () {
    if ($(this).hasClass(selfClass)) {
      if (isQuantity) {
        price = Number($(this).children().first().data('price'));
        // alert('price: ' + price);
      } else {
        quantity = Number($(this).children().first().val());
        // console.log($(this).children().first());
        // alert('quantity: ' + quantity);
        // alert($(this).children().first().data('quantity'));
      }
    }
    if ($(this).hasClass('subtotal-cell') || $(this).hasClass('surcharge-subtotal-cell') ) {
      if (isSurcharge) {
        // alert(price);
        $(this).text(quantity * price * Number(getTotal('.subtotal-cell')) / 100);
        // $(this).text(quantity * price * Number($('#total').text()) / 100);// Number($('#total').text()) / 100);
      } else {
        $(this).text(quantity * price);
      }
    }
  });
}

var i = 1;
function addRecargoRowJS() {
  $('#total-row').before(`
    <tr id="recargo${i}" style="background-color: #1C84C6;">
      <td><input class="deletable deletable-recargo" type="checkbox" name="deletable"></td>
      <td class="select-surcharge-cell">
        <select class="select-recargo" data-first_time="true" id="t_recargo${i}" name="t_factura[t_recargo_ids][]" style="width: 100%;">
          <option></option>
          <% TRecargo.all.each do |t_recargo| %>
            <option data-rate="<%= t_recargo.tasa %>" value="<%= t_recargo.id %>"><%= t_recargo.descripcion %></option>
          <% end %>
        </select>
        <input class="recargo-descripcion" name="dynamic_attributes[t_recargo][descripcions][]" type="hidden">
        <input class="recargo-id" name="dynamic_attributes[t_recargo][ids][]" type="hidden">
      </td>
      <td class="descripcion-cell"></td>
      <td class="quantity-cell">
        <input class="quantity quantity-input" data-quantity="1" min="0" style="height: 28px; width: 100%;" type="number" value="1">
        <input class="recargo-quantity" name="dynamic_attributes[t_recargo][quantities][]" type="hidden" value="1">
      </td>
      <td class="price-cell">
        <input class="price recargo-input" min="0" step="0.01" style="height: 28px; width: 100%;" type="number">
        <input class="recargo-price" name="dynamic_attributes[t_recargo][prices][]" type="hidden">
      </td>
      <td class="surcharge-subtotal-cell" style="color: aqua; text-align: center;"></td>
    </tr>
  `);
  $(`#t_recargo${i}`).select2({ placeholder: 'Seleccione' });
  i++;
}

// function cleanAllSurcharges() {
//   $('.surcharge-subtotal-cell').each(function () {
//     $(this).text(0);
//   });
// }

function updateAllSurcharges() {
  $('.recargo-input').each(function () {
    let rate = $(this).val();
    // console.log(Number(getTotal('.subtotal-cell')));
    $(this).data('price', rate * Number(getTotal('.subtotal-cell')));
    // $(this).data('price', rate * Number($('#total').text()));
    // alert(rate * Number($('#total').text()));
    setSubTotal(this, false);
    // console.log(`Total surcharges: ${getTotal('.surcharge-subtotal-cell')}`);
    // console.log(`Total: ${getTotal('.subtotal-cell') + getTotal('.surcharge-subtotal-cell')}`);
    setTotal('#total', getTotal('.subtotal-cell') + getTotal('.surcharge-subtotal-cell'));
  });
}

function setDynamicClientData(inputClass, dynamicData) {
  $(inputClass).each(function () {
    // console.log($(this).attr('id'));
    switch($(this).attr('id')) {
      case 'select-codigo-input':
        // alert($(this).attr('id'));
        // alert(dynamicData.t_cliente.resolucion_id);
        console.log(dynamicData.t_cliente);
        var data = [{ id: dynamicData.t_cliente.codigo_select, text: dynamicData.t_cliente.codigo_select},]

        var option = new Option(dynamicData.t_cliente.cedula, dynamicData.t_cliente.cedula, true, true);
        $('#select-cedula').append(option).trigger('change', dynamicData.t_cliente.resolucion_id);
        $('#select-cedula-input').val(dynamicData.t_cliente.cedula);

        // if (dynamicData.t_cliente.resolucion_id === null) {
        //   var option = new Option(dynamicData.t_cliente.cedula, dynamicData.t_cliente.cedula, true, true);
        //   $('#select-cedula').append(option).trigger('change', dynamicData.t_cliente.resolucion_id);
        //   $('#select-cedula-input').val(dynamicData.t_cliente.cedula);
        // } else {
        //   var option = new Option(dynamicData.t_cliente.codigo_select, dynamicData.t_cliente.codigo_select, true, true);
        //   $('#select-codigo').append(option).trigger('change', dynamicData.t_cliente.resolucion_id);
        //   $('#select-codigo-input').val(dynamicData.t_cliente.codigo_select);
        // }

        //alert(dynamicData.t_cliente.resolucion_id);

        //$('#select-resolucion').val(dynamicData.t_cliente.resolucion_id);
        //$('#select-resolucion').change();
        break;
      // case 'select-resolucion-input':
      //   var data = [{ id: dynamicData.t_cliente.resolucion_id, text: dynamicData.t_cliente.resolucion},]
      //   // $('#select-resolucion').empty().append('<option></option>').select2({ data: data, placeholder: 'Seleccione' });
      //   //$('#select-resolucion').append(option);
      //   // $('#select-resolucion').val(dynamicData.t_cliente.resolucion_id);
      //   // $('#select-resolucion').trigger('change');
      //   console.log(dynamicData.t_cliente.resolucion);
      //   break;
    }
  });
  // var option = new Option(dynamicData.t_cliente.resolucion, dynamicData.t_cliente.resolucion_id, true, true);
  // $('#select-resolucion').empty().append('<option></option>').append(option).select2();
}

function setDynamicServicesData(
  selectClass,
  nameInputClass, idInputClass, descriptionInputClass, quantityInputClass, priceInputClass,
  names, ids, descriptions, quantities, prices) {
  // dynamicDataToModify = dynamicData;
  i = 0;
  $(selectClass).each(function () {
    $(this).val(ids[i]);
    $(this).trigger('change');
    i++;
  });
  i = 0;
  $(nameInputClass).each(function () {
    $(this).val(names[i]);
    i++;
  });
  i = 0;
  $(descriptionInputClass).each(function () {
    $(this).val(descriptions[i]);
    i++;
  });
  i = 0;
  $(quantityInputClass).each(function () {
    $(this).val(quantities[i]);
    i++;
  });
  i = 0;
  $(priceInputClass).each(function () {
    $(this).val(prices[i]);
    i++;
  });
  i = 0;
  $('.descripcion').each(function () {
    $(this).val(descriptions[i]);
    i++;
    setSubTotal(this);
  });
  i = 0;
  $('.quantity').each(function () {
    $(this).val(quantities[i]);
    i++;
    setSubTotal(this);
  });
  i = 0;
  $('.price').each(function () {
    $(this).val(prices[i]);
    i++;
    setSubTotal(this, false);
  });
  setTotal('#total', getTotal('.subtotal-cell') /*+ Number($('#total-rate').text())*/);
  // updateAllSurcharges();
  // dynamicDataToModify = dynamicData;
  // $(descriptionInputClass).each(function () {
  //   // console.log(dynamicDataToModify);
  //   $(this).val(descriptions[i]);
  //   i++;
  //   // dynamicDataToModify.splice(0, 1);
  // });

  // i = 0;
  // $(idInputClass).each(function () {
  //   $(this).val(ids[i]);
  //   i++;
  // });
  // i = 0;

  // $(selectClass).each(function () {
  //   console.log(dynamicData[i]);
  //   $(this).val(dynamicData[i]);
  //   $(this).trigger('change');
  //   i++;
  //   // dynamicDataToModify.splice(0, 1);
  // });
}

function setDynamicSurchargesData(
  selectClass,
  descriptionInputClass, idInputClass, quantityInputClass, priceInputClass,
  descriptions, ids, quantities, prices) {
  for (var i = 0; i < ids.length; i++) {
    addRecargoRowJS();
  }

  i = 0;
  $(selectClass).each(function () {
    // var option = new Option(descriptions[i], ids[i], true, true);
    // $(this).append(option).trigger('change');
    $(this).val(ids[i]);
    $(this).trigger('change');
    i++;
    // data = $(this).select2('data')[0];
    // rate = Number(data.rate);
    // console.log($(this).select2('data')[0]);
    // $(this).parent().siblings().each(function () {
    //   if ($(this).hasClass('price-cell') || $(this).hasClass('surcharge-subtotal-cell')) {
    //     let priceInput = $(this).children().first();

    //     // cleanAllSurcharges();
    //     //setTotal('#total', getTotal('.subtotal-cell'));
    //     //priceInput.val(rate);
    //     //updateAllSurcharges();
    //     //setTotal('#total', getTotal('.subtotal-cell') + getTotal('.surcharge-subtotal-cell') + Number($('#total-rate').text()));
    //   }
    // });
  });

  i = 0;
  $(quantityInputClass).each(function () {
    $(this).val(quantities[i]);
    i++;
  });
  i = 0;
  $(priceInputClass).each(function () {
    $(this).val(prices[i]);
    i++;
  });
  i = 0;
  $('.quantity-input').each(function () {
    $(this).val(quantities[i]);
    i++;
    setSubTotal(this);
  });
  i = 0;
  $('.recargo-input').each(function () {
    $(this).val(prices[i]);
    i++;
    setSubTotal(this, false);
  });

  setTotal('#total', getTotal('.subtotal-cell') /*+ Number($('#total-rate').text())*/);
  updateAllSurcharges();
}